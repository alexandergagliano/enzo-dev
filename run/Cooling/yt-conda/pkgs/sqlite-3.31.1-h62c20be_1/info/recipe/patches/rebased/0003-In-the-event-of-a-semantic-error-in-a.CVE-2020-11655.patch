From ede34bda76fcddc8fd6a49001e08adebc515eacc Mon Sep 17 00:00:00 2001
From: drh <drh@noemail.net>
Date: Fri, 3 Apr 2020 13:19:03 +0000
Subject: [PATCH] In the event of a semantic error in an aggregate query,
 early-out the resetAccumulator() function to prevent problems due to
 incomplete or incorrect initialization of the AggInfo object. Fix for ticket
 [af4556bb5c285c08].

FossilOrigin-Name: 4a302b42c7bf5e11ddb5522ca999f74aba397d3a7eb91b1844bb02852f772441
---
 src/select.c      |  1 +
 test/window1.test | 10 ++++++++++
 2 files changed, 11 insertions(+)

diff --git a/src/select.c b/src/select.c
index 595b6eb6b..b5e5a75a4 100644
--- a/src/select.c
+++ b/src/select.c
@@ -5352,6 +5352,7 @@ static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){
   struct AggInfo_func *pFunc;
   int nReg = pAggInfo->nFunc + pAggInfo->nColumn;
   if( nReg==0 ) return;
+  if( pParse->nErr ) return;
 #ifdef SQLITE_DEBUG
   /* Verify that all AggInfo registers are within the range specified by
   ** AggInfo.mnReg..AggInfo.mxReg */
diff --git a/test/window1.test b/test/window1.test
index 833e211fb..ca5315ec4 100644
--- a/test/window1.test
+++ b/test/window1.test
@@ -1594,4 +1594,14 @@ do_execsql_test 48.1 {
 } {2 2 2}
 
 
+# 2020-04-03 ticket af4556bb5c285c08
+#
+reset_db
+do_catchsql_test 51.1 {
+  CREATE TABLE a(b, c);
+  SELECT c FROM a GROUP BY c
+    HAVING(SELECT(sum(b) OVER(ORDER BY b),
+                  sum(b) OVER(PARTITION BY min(DISTINCT c), c ORDER BY b)));
+} {1 {row value misused}}
+
 finish_test
-- 
2.25.0

